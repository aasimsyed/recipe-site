// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  engineType      = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  recipes       Recipe[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recipe {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  description String
  content     Json
  ingredients Json
  cookTime    Int
  prepTime    Int
  servings    Int
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  categories  Category[]
  media       Media[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  rating      Float     @default(0)
  video       String?
  nutrition   Json?
  reviews     Review[]
  steps       Json
  @@index([title, description])
}

model Category {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  recipes   Recipe[]
  @@index([slug])
}

model Media {
  id        String   @id @default(cuid())
  url       String
  publicId  String?
  type      MediaType
  recipe    Recipe?  @relation(fields: [recipeId], references: [id])
  recipeId  String?
}

enum MediaType {
  IMAGE
  VIDEO
}

model Review {
  id        String   @id @default(cuid())
  rating    Float
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  recipeId  String
  user      User     @relation(fields: [userId], references: [id])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])

  @@unique([userId, recipeId])
  @@index([recipeId])
} 